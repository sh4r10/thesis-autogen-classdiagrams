@startuml
class TitlePage {
    + #onCreate()
    +goToPreGameSelection(view: View)
    +goToPreGameSelectionMulti(view: View)
    +goToLeaderboard(view: View)
    +goToOptions(view: View)
}
class GameTimer {
    +GameTimer(startTimer: long, interval: long)
    +onFinish()
    +onTick(millisUntilFinished: long)
}

class PreGameSelection {
    -diff: View
    -animal: View
    -background: View
    + setDiff(view: View)
    + setAnimal(view: View)
    + setBackground(view: View)
    + goToSinglePlayer(view: View)
    + goToTitlePage(view: View)
}

class SinglePlayer {
    -model: SinglePlayerModel
    -gameTimer: GameTimer
    -NUM_WORDS: int
    -bg: int
    + #onCreate(savedInstanceState: Bundle)
    + onKeyDown(key: int, event: KeyEvent)
    + initialDisplay(animalID: Drawable, backgroundID: Drawable)
    + displayWord(wordIndex: int, word: String)
    + displayTime(secondsLeft: long)
    + displayScore(score: int)
    + highlightWord(wordIndex: int, word: String, letterIndex: int)
    + update(Obervable, Object)
    + goToPostGame()

}

class PostGameScreen {
    + #onCreate()
    + goToTitlePage(view: View)
    + goToPreGameSelection(view: View)
}
class SinglePlayerModel {
    -currWordIndex: int
    -currLetterIndex: int
    -wordsDisplayed: int[]
    -wordsList: String[]
    -nextWordIndex: int
    -score: int
    -numWordsDisplayed: int
    -am: AssetManager
    -currFirstLetters: Set<Character>
    +SinglePlayerModel(diff: States.difficulty, am: AssetManager, wordis: int)
    -getWordsList(diff: States.difficulty)
    +populateDisplayedList()
    +typedLetter(letter: char)
    -updateWordsDisplayed():
}


TitlePage -down-> "creates" PreGameSelection
PreGameSelection -right-> "creates" SinglePlayer
SinglePlayer -down-> SinglePlayerModel : "creates"
SinglePlayer -right-> PostGameScreen : "creates"
GameTimer -down-> "creates" SinglePlayer
@enduml
