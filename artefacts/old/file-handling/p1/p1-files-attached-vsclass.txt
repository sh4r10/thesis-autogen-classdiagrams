@startuml

class States {
    - difficulty : enum
    - update : enum
}

class PreGameSelectionMulti {
    + onCreate(savedInstanceState : Bundle) : void
    + onCreateOptionsMenu(menu : Menu) : boolean
}

class WordData {
    - id : long
    - word : String
    + getId() : long
    + setId(id : long) : void
    + getWord() : String
    + setWord(word : String) : void
    + equals(obj : Object) : boolean
    + hashCode() : int
    + toString() : String
}

class WordDBHelper {
    - DATABASE_NAME : String
    - DATABASE_TABLE : String
    - DATABASE_VERSION : int
    - KEY_ID : String
    - KEY_WORDDATA : String
    - KEY_DIFFICULTY : String
    - CREATE_DATABASE : String
    + WordDBHelper(context : Context)
    + onCreate(database : SQLiteDatabase) : void
    + onUpgrade(db : SQLiteDatabase, oldVer : int, newVer : int) : void
}

class TypingWordDB {
    - configProps : Properties
    - DBDriver : String
    - DBUrl : String
    - DBUser : String
    - DBPassword : String
    - DBcon : Connection
    - getStatement : PreparedStatement
    - GET_STATEMENT : String
    + openConnection() : void
    + closeConnection() : void
    + prepareStatements() : void
    + getSomething() : String
}

class TitlePage {
    + onCreate(savedInstanceState : Bundle) : void
    + onCreateOptionsMenu(menu : Menu) : boolean
    + goToPreGameSelection(view : View) : void
    + goToPreGameSelectionMulti(view : View) : void
    + goToLeaderboard(view : View) : void
    + goToOptions(view : View) : void
    + onBackPressed() : void
}

class PostGameScreen {
    + onCreate(savedInstanceState : Bundle) : void
    + onBackPressed() : void
    + onCreateOptionsMenu(menu : Menu) : boolean
    + goToTitlePage(view : View) : void
    + goToPreGameSelection(view : View) : void
}

class ZeroFeature {
    - worddb : WordDB
    + onCreate(savedInstanceState : Bundle) : void
    + onCreateOptionsMenu(menu : Menu) : boolean
    + goToStart(view : View) : void
    - addWords() : void
    - fetchData() : void
    - convertToString(wd : WordData, diff : Integer) : String
}

class WordDB {
    - dbHelper : WordDBHelper
    - allColumns : String[]
    - ALL_ROWS : String
    + WordDB(context : Context)
    + createWordData(word : String, diff : int) : WordData
    + deleteWordData(worddata : WordData) : void
    + resetDatabase() : void
    + getAllWords() : Map<WordData, Integer>
    - cursorToWordData(cursor : Cursor) : WordData
}

class SinglePlayerModel {
    - numWordsDisplayed : int
    - wordsList : String[]
    - wordsDisplayed : int[]
    - currWordIndex : int
    - currLetterIndex : int
    - nextWordIndex : int
    - score : int
    - am : AssetManager
    - currFirstLetters : Set<Character>
    + SinglePlayerModel(diff : States.difficulty, am : AssetManager, wordsDis : int)
    - getWordsList(diff : States.difficulty) : void
    + populateDisplayedList() : void
    + typedLetter(letter : char) : void
    - updateWordsDisplayed() : void
    + getScore() : int
    + getCurrWord() : String
    + getCurrWordIndex() : int
    + getCurrLetterIndex() : int
}

class Options {
    + onCreate(savedInstanceState : Bundle) : void
    + onCreateOptionsMenu(menu : Menu) : boolean
}

class Leaderboard {
    + onCreate(savedInstanceState : Bundle) : void
    + onCreateOptionsMenu(menu : Menu) : boolean
}

class PreGameSelection {
    - HIGHTLIGHT_COLOR : int
    - diff : View
    - animal : View
    - background : View
    + onCreate(savedInstanceState : Bundle) : void
    + onCreateOptionsMenu(menu : Menu) : boolean
    + setDiff(view : View) : void
    + setAnimal(view : View) : void
    + setBackground(view : View) : void
    + goToSinglePlayer(view : View) : void
    + goToTitlePage(view : View) : void
    + onBackPressed() : void
}

class SinglePlayer {
    - model : SinglePlayerModel
    - NUM_WORDS : int
    - bg : int
    - ppw : PopupWindow
    - popUpParams : LayoutParams
    - popUpLayout : LinearLayout
    - currentTime : long
    - pausedTime : long
    - gameTimer : GameTimer
    - INTERVAL : long
    - START_TIME : long
    - paused : boolean
    + onCreate(savedInstanceState : Bundle) : void
    + onCreateOptionsMenu(menu : Menu) : boolean
    + onKeyDown(key : int, event : KeyEvent) : boolean
    + onPause() : void
    + initialDisplay(animalID : Drawable, backgroundID : Drawable) : void
    + displayWord(wordIndex : int, word : String) : void
    + displayTime(secondsLeft : long) : void
    + displayScore(score : int) : void
    + highlightWord(wordIndex : int, word : String, letterIndex : int) : void
    + update(arg0 : Observable, arg1 : Object) : void
    + keyboardButton(view : View) : void
    + goToPostGame() : void
    + getByStringId(id : String) : View
    + pauseGame(view : View) : void
    + pausedContinue(view : View) : void
    + pausedNewGame(view : View) : void
    + pausedMainMenu(view : View) : void
    - GameTimer(startTime : long, interval : long)
}

PreGameSelectionMulti --> "uses" States
SinglePlayerModel --> "uses" States
SinglePlayer --> SinglePlayerModel : "observes"
SinglePlayer -down-> States : "uses"
ZeroFeature --> "uses" WordDB
WordDB --> "uses" WordDBHelper
WordDB -right-> WordData
TitlePage --> PreGameSelection
TitlePage --> PreGameSelectionMulti
TitlePage --> Leaderboard
TitlePage --> Options
PreGameSelection --> SinglePlayer : "starts"

@enduml

