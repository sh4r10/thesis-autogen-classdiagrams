---ItemVisitor.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model;

import raisemeup.model.beans.Food;
import raisemeup.model.beans.Upgrade;

/**
 *
 * @author Andras
 */
public class ItemVisitor {
    public int visit(Food food) {
        return food.getPrice();
    }
    
    public int visit(Upgrade upgrade) {
        return upgrade.getPrice();
    }
}


---DAO.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import raisemeup.model.beans.Food;
import raisemeup.model.beans.Item;
import raisemeup.model.beans.Job;
import raisemeup.model.beans.Pet;
import raisemeup.model.beans.Upgrade;
import raisemeup.model.beans.User;

/**
 *
 * @author lekogabor
 */
public class DAO {
    
    Map<Integer, User> users = new HashMap<Integer, User>();
    Map<Integer, Pet> pets = new HashMap<Integer, Pet>();
    Map<Integer, Food> foods = new HashMap<Integer, Food>();
    Map<Integer, Upgrade> upgrades = new HashMap<Integer, Upgrade>();
    Map<Integer, Job> jobs = new HashMap<Integer, Job>();
    
    private static final String dbfile = "C:/db/raise.db";
    
    private static final String SQL_addUser = 
		"insert into User (email, username, password) values " +
		"(?,?,?)";
    private static final String SQL_queryUser = "select * from User where username = ?";
    private static final String SQL_delUser = "delete from User where username = ?";
    private static final String SQL_listUsers = "select * from User";
    private static final String SQL_updateUser = "UPDATE User SET email = ?, password = ? where username = ?";
    
    
    private static final String SQL_addPet = 
		"insert into Pet (type, variant, name, hunger, energy, fun, hygiene, age, money, image, userid) values " +
		"(?,?,?,?,?,?,?,?,?,?,?)";
    private static final String SQL_queryPet = "select * from Pet where name = ? and userid = ?";
    private static final String SQL_delPet = "delete from Pet where userid = ? and name = ?";
    private static final String SQL_listPets = "select * from Pet";
    private static final String SQL_updatePet = 
                "UPDATE Pet SET hunger = ?, energy = ?, fun = ?, hygiene = ?, money = ?, age=?, image = ? WHERE name = ? AND userid = ?";

    private static final String SQL_addPetsFoods = "insert into FoodOwned (petid, foodid, piece) values (?, ?, ?)";
    private static final String SQL_updatePetsFoods = "update FoodOwned set piece = ? where petid = ? and foodid = ?";
    private static final String SQL_delPetsFoods = "delete from FoodOwned where petid = ? and foodid = ?";
    
    private static final String SQL_addPetsUpgrades = "insert into UpgradeOwned (petid, upgradeid, piece) values (?, ?, ?)";
    private static final String SQL_updatePetsUpgrades = "update UpgradeOwned set piece = ? where petid = ? and upgradeid = ?";
    private static final String SQL_delPetsUpgrades = "delete from UpgradeOwned where petid = ? and upgradeid = ?";
    
    private static final String SQL_addFood = 
                "insert into Food (name, price, valuedog, valuecat, valuefish, valuepenguin, image ) values " +
                "(?,?,?,?,?,?,?)";
    private static final String SQL_queryFood = "select * from Food where name = ?";
    private static final String SQL_delFood = "delete from Food where name = ?";
    private static final String SQL_listFoods = "select * from Food";
    private static final String SQL_updateFood = "UPDATE Food SET name = ?, price = ?, valuedog = ?, valuecat = ?, valuefish = ?, valuepenguin = ?, image = ? WHERE foodid = ?";
    
    
    private static final String SQL_addUpgrade = 
                "insert into Upgrade (name, price, property, species, value, image) values " +
                "(?,?,?,?,?,?)";
    private static final String SQL_queryUpgrade = "select * from Upgrade where name = ?";
    private static final String SQL_delUpgrade = "delete from Upgrade where name = ?";
    private static final String SQL_listUpgrades = "select * from Upgrade";
    private static final String SQL_updateUpgrade = "UPDATE Upgrade SET name = ?, price = ?, property = ?, species = ?, value = ?, image = ? WHERE upgradeid = ?";
    
    
    private static final String SQL_addJob = 
                "insert into Job (impactenergy, impacthunger, impacthygiene, impactfun, title, length, image, client, message, reward, species) values " +
                "(?,?,?,?,?,?,?,?,?,?,?)";
    private static final String SQL_queryJob = "select * from Job where title = ? and species = ?";
    private static final String SQL_delJob = "delete from Job where id = ?";
    private static final String SQL_listJobs = "select * from Job";
    private static final String SQL_updateJob = "UPDATE Job SET impactenergy = ?, impacthunger = ?, impacthygiene = ?, impactfun = ?, title = ?, length = ?, image = ?, client = ?, message = ?, reward = ?, species = ? WHERE id = ?";
    
    private static final String SQL_addPetsJob = "insert into JobOwned (petid, jobid, timeworked) values (?, ?, ?)";
    private static final String SQL_updatePetsJob = "update JobOwned set timeworked = ? where petid = ? and jobid = ?";
    private static final String SQL_delPetsJob = "delete from JobOwned where petid = ? and jobid = ?";
    
    //insert into Pet (type, variant, name, hunger, energy, fun, hygiene, age, image, userid) values ("cica","szep","juci",100,100,100,100,0,"",1);
    //insert into User (email, name, username, password) values ("geabei25@gmail.com","Leko Gabor", "gale", "123" );
    
    public DAO() throws ClassNotFoundException{
		Class.forName("org.sqlite.JDBC");
	}
    
    public boolean addUser(User u) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		if(checkIfUserExists(u))
			return false;

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addUser);
			int index = 1;
			pst.setString(index++, u.getEmail());
                        pst.setString(index++, u.getUsername());
			pst.setString(index++, u.getPassword());
			
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public Map<Integer, User> getUser() throws SQLException{
		Connection conn = null;
		Statement st = null;
		//Toroljuk a memoriabol a customereket (azert tartjuk bennt, mert lehetnek kesobb olyan muveletek, melyekhez nem kell frissiteni)
		users.clear();
		
		try {
			//Az adatb�zis kapcsolatunkat a DriverManager seg�ts�g�vel hozzuk l�tre
			//Megadjuk hogy a jdbc milyen driveren keresztul milyen f�jlt keressen
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			//a kapcsolat(conn) objektumtol kerunk egy egyszeru (nem parameterezheto) utasitast
			st = conn.createStatement();
			//Az utasitas objektumon keresztul inditunk egy queryt(SQL_listCustomers)
			//Az eredmenyeket egy ResultSet objektumban kapjuk vissza
			ResultSet rs = st.executeQuery(SQL_listUsers);
			//Bejarjuk a visszakapott ResultSet-et (ami a customereket fogja tartalmazni)
			while(rs.next()){
				//Uj Customert hozunk letre
				User u = new User();
				//A customer nevet a resultSet aktualis soraban talalhato name rekordra allitjuk be
				
                                u.setId(rs.getInt("userid"));
                                u.setEmail(rs.getString("email"));
				//A customer korat a resultSet aktualis soraban talalhato age rekordra allitjuk be
				u.setUsername(rs.getString("username"));
				u.setPassword(rs.getString("password"));
				
				users.put(rs.getInt("userid"), u);
			}
		} finally {
			try {
				if(st != null)
					st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return users;
	}
    
    public boolean checkIfUserExists(User u) throws SQLException {
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		try {
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			pst = conn.prepareStatement(SQL_queryUser);
			int index = 1;
			pst.setString(index++, u.getUsername());
			rs = pst.executeQuery();
			
			if (rs.next())
				return true;
			return false;			
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}	

    public boolean delUser(User u) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delUser);
			int index = 1;
			pst.setString(index++, u.getUsername());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

    public boolean updateUser(User u) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updateUser);
			int index = 1;
			pst.setString(index++, u.getEmail());
                        System.out.println("email: " + u.getEmail());
			pst.setString(index++, u.getPassword());
                        System.out.println("pass: " + u.getPassword());
			pst.setString(index++, u.getUsername());
                        System.out.println("name: " + u.getUsername());
                        
			pst.executeUpdate();
                        System.out.println(SQL_updateUser);
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    
    public boolean addPet(Pet p) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		if(checkIfPetExists(p))
			return false;

		Connection conn = null;
		PreparedStatement pst = null;
                Connection conn2 = null;
		PreparedStatement pst2 = null;
                Connection conn3 = null;
		PreparedStatement pst3 = null;
		try {
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addPet);
			int index = 1;
			pst.setString(index++, p.getType());
                        pst.setString(index++, p.getVariant());
                        pst.setString(index++, p.getName());
                        pst.setInt(index++, p.getHunger());
                        pst.setInt(index++, p.getEnergy());
                        pst.setInt(index++, p.getFun());
                        pst.setInt(index++, p.getHygiene());
                        pst.setInt(index++, p.getAge());
                        pst.setInt(index++, p.getMoney());
                        pst.setString(index++, p.getImage());
                        pst.setInt(index++, p.getOwner());
			
			pst.executeUpdate();
                        
                        conn2 = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst2 = conn2.prepareStatement(SQL_addPetsFoods);
                        conn3 = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst3 = conn3.prepareStatement(SQL_addPetsUpgrades);
                        
			
                        int index2 = 1;
                        for (Map.Entry<Item, Integer> i : p.getOwneditems().entrySet()){
                            index2 = 1;
                            if (i instanceof Food){
                                pst2.setInt(index2++, p.getPetid());
                                pst2.setInt(index2++, i.getKey().getId());
                                pst2.setInt(index2++, i.getValue());
                                pst2.executeUpdate();
                            } else {
                                pst3.setInt(index2++, p.getPetid());
                                pst3.setInt(index2++, i.getKey().getId());
                                pst3.setInt(index2++, i.getValue());
                                pst3.executeUpdate();
                            }
                        }
                        
                        
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                        try {
				if(pst2 != null)
					pst2.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn2 != null)
					conn2.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                        try {
				if(pst3 != null)
					pst3.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn3 != null)
					conn3.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public Map<Integer, Pet> getPet() throws SQLException{
		Connection conn = null;
		Statement st = null;
                Connection conn2 = null;
		Statement st2 = null;
                Connection conn3 = null;
		Statement st3 = null;
                Connection conn4 = null;
		Statement st4 = null;		
                //Toroljuk a memoriabol a customereket (azert tartjuk bennt, mert lehetnek kesobb olyan muveletek, melyekhez nem kell frissiteni)
		pets.clear();
		
		try {
			//Az adatb�zis kapcsolatunkat a DriverManager seg�ts�g�vel hozzuk l�tre
			//Megadjuk hogy a jdbc milyen driveren keresztul milyen f�jlt keressen
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			//a kapcsolat(conn) objektumtol kerunk egy egyszeru (nem parameterezheto) utasitast
			st = conn.createStatement();
			//Az utasitas objektumon keresztul inditunk egy queryt(SQL_listCustomers)
			//Az eredmenyeket egy ResultSet objektumban kapjuk vissza
			ResultSet rs = st.executeQuery(SQL_listPets);
			//Bejarjuk a visszakapott ResultSet-et (ami a customereket fogja tartalmazni)
			while(rs.next()){
				//Uj Customert hozunk letre
				Pet p = new Pet();
				//A customer nevet a resultSet aktualis soraban talalhato name rekordra allitjuk be
				p.setPetid(rs.getInt("petid"));
                                p.setType(rs.getString("type"));
                                p.setVariant(rs.getString("variant"));
                                p.setName(rs.getString("name"));
                                p.setHunger(rs.getInt("hunger"));
                                p.setEnergy(rs.getInt("energy"));
                                p.setFun(rs.getInt("fun"));
                                p.setHygiene(rs.getInt("hygiene"));
                                p.setAge(rs.getInt("age"));
                                p.setMoney(rs.getInt("money"));
                                p.setImage(rs.getString("image"));
                                p.setOwner(rs.getInt("userid"));
				
                                
                                conn2 = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
                                st2 = conn2.createStatement();
                                ResultSet rs2 = st2.executeQuery("select Food.foodid, name, price, valuedog, valuecat, valuefish, valuepenguin, image, piece from Food, FoodOwned where FoodOwned.petid = " + rs.getInt("petid") + " and Food.foodid = FoodOwned.foodid");
                                while(rs2.next()){
                                    Food f = new Food();
                                    f.setId(rs2.getInt("foodid"));
                                    f.setName(rs2.getString("name"));
                                    f.setPrice(rs2.getInt("price"));
                                    f.setValuedog(rs2.getInt("valuedog"));
                                    f.setValuecat(rs2.getInt("valuecat"));
                                    f.setValuefish(rs2.getInt("valuefish"));
                                    f.setValuepenguin(rs2.getInt("valuepenguin"));
                                    f.setImage(rs2.getString("image"));
                                    
                                    p.getOwneditems().put(f, rs2.getInt("piece"));
                                }
                                
                                conn3 = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
                                st3 = conn3.createStatement();
                                ResultSet rs3 = st3.executeQuery("select Upgrade.upgradeid, name, price, property, species, value, image, piece from Upgrade, UpgradeOwned where UpgradeOwned.petid = " + rs.getInt("petid") + " and Upgrade.upgradeid = UpgradeOwned.upgradeid");

                                while(rs3.next()){
                                    Upgrade up = new Upgrade();
                                    up.setId(rs3.getInt("upgradeid"));
                                    up.setName(rs3.getString("name"));
                                    up.setPrice(rs3.getInt("price"));
                                    up.setProperty(rs3.getString("property"));
                                    up.setSpecies(rs3.getString("species"));
                                    up.setValue(rs3.getInt("value"));
                                    up.setImage(rs3.getString("image"));
                                    
                                    p.getOwneditems().put(up, rs3.getInt("piece"));
                                }
                                
                                conn4 = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
                                st4 = conn4.createStatement();
                                ResultSet rs4 = st4.executeQuery("select Job.id, impactenergy, impacthunger, impacthygiene, impactfun, title, length, image, client, message, reward, species, timeworked from Job, JobOwned where JobOwned.petid = " + rs.getInt("petid") + " and Job.id = JobOwned.jobid");
                                while(rs4.next()){
                                    Job j = new Job();
                                    
                                    j.setId(rs4.getInt("id"));
                                    j.setImpactenergy(rs4.getInt("impactenergy"));
                                    j.setImpacthunger(rs4.getInt("impacthunger"));
                                    j.setImpacthygiene(rs4.getInt("impacthygiene"));
                                    j.setImpactfun(rs4.getInt("impactfun"));
                                    j.setTitle(rs4.getString("title"));
                                    j.setLength(rs4.getInt("length"));
                                    j.setImage(rs4.getString("image"));
                                    j.setClient(rs4.getString("client"));
                                    j.setMessage(rs4.getString("message"));
                                    j.setReward(rs4.getInt("reward"));
                                    j.setSpecies(rs4.getString("species"));
                                    
                                    //p.getOwnedjobs().add(j);
                                    p.getOwnedjobs().put(j, rs4.getInt("timeworked"));
                                }
                                
				pets.put(rs.getInt("petid"), p);
			}
		} finally {
			try {
				if(st != null)
					st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                        try {
				if(st2 != null)
					st2.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn2 != null)
					conn2.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                        try {
				if(st3 != null)
					st3.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn3 != null)
					conn3.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}try {
				if(st4 != null)
					st4.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn4 != null)
					conn4.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return pets;
	}
    
    public boolean checkIfPetExists(Pet p) throws SQLException {
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		try {
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			pst = conn.prepareStatement(SQL_queryPet);
			int index = 1;
			
                        pst.setString(index++, p.getName());
			pst.setInt(index++, p.getOwner());
                        rs = pst.executeQuery();
			
			if (rs.next())
				return true;
			return false;			
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}	

    public boolean delPet(Pet p) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delPet);
			int index = 1;
			pst.setInt(index++, p.getOwner());
                        pst.setString(index++, p.getName());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

    public boolean updatePet(Pet p) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updatePet);
			int index = 1;
			
			pst.setInt(index++, p.getHunger());
                        pst.setInt(index++, p.getEnergy());
                        pst.setInt(index++, p.getFun());
                        pst.setInt(index++, p.getHygiene());
                        pst.setInt(index++, p.getMoney());
                        pst.setInt(index++, p.getAge());
                        pst.setString(index++, p.getImage());
                        pst.setString(index++, p.getName());
                        pst.setInt(index++, p.getOwner());
                        
			pst.executeUpdate();
                        //System.out.println(SQL_updatePet);
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    
    public boolean addFood(Food f) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		if(checkIfFoodExists(f))
			return false;

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addFood);
			int index = 1;
			pst.setString(index++, f.getName());
                        pst.setInt(index++, f.getPrice());
                        pst.setInt(index++, f.getValuedog());
                        pst.setInt(index++, f.getValuecat());
                        pst.setInt(index++, f.getValuefish());
                        pst.setInt(index++, f.getValuepenguin());
                        pst.setString(index++, f.getImage());
                        			
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public Map<Integer, Food> getFood() throws SQLException{
		Connection conn = null;
		Statement st = null;
		//Toroljuk a memoriabol a customereket (azert tartjuk bennt, mert lehetnek kesobb olyan muveletek, melyekhez nem kell frissiteni)
		foods.clear();
		
		try {
			//Az adatb�zis kapcsolatunkat a DriverManager seg�ts�g�vel hozzuk l�tre
			//Megadjuk hogy a jdbc milyen driveren keresztul milyen f�jlt keressen
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			//a kapcsolat(conn) objektumtol kerunk egy egyszeru (nem parameterezheto) utasitast
			st = conn.createStatement();
			//Az utasitas objektumon keresztul inditunk egy queryt(SQL_listCustomers)
			//Az eredmenyeket egy ResultSet objektumban kapjuk vissza
			ResultSet rs = st.executeQuery(SQL_listFoods);
			//Bejarjuk a visszakapott ResultSet-et (ami a customereket fogja tartalmazni)
			while(rs.next()){
				//Uj Customert hozunk letre
				Food f = new Food();
				//A customer nevet a resultSet aktualis soraban talalhato name rekordra allitjuk be
                                f.setId(rs.getInt("foodid"));
                                f.setName(rs.getString("name"));
                                f.setPrice(rs.getInt("price"));
                                f.setValuedog(rs.getInt("valuedog"));
                                f.setValuecat(rs.getInt("valuecat"));
                                f.setValuefish(rs.getInt("valuefish"));
                                f.setValuepenguin(rs.getInt("valuepenguin"));
                                f.setImage(rs.getString("image"));
                                				
				foods.put(rs.getInt("foodid"), f);
			}
		} finally {
			try {
				if(st != null)
					st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return foods;
	}
    
    public boolean checkIfFoodExists(Food f) throws SQLException {
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		try {
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			pst = conn.prepareStatement(SQL_queryFood);
			int index = 1;
			pst.setString(index++, f.getName());
			rs = pst.executeQuery();
			
			if (rs.next())
				return true;
			return false;			
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}	

    public boolean delFood(Food f) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delFood);
			int index = 1;
			pst.setString(index++, f.getName());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public boolean updateFood(Food f) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updateFood);
			int index = 1;
			
			pst.setString(index++, f.getName());
                        pst.setInt(index++, f.getPrice());
                        pst.setInt(index++, f.getValuedog());
                        pst.setInt(index++, f.getValuecat());
                        pst.setInt(index++, f.getValuefish());
                        pst.setInt(index++, f.getValuepenguin());
                        pst.setString(index++, f.getImage());
                        pst.setInt(index++, f.getId());
                        
			pst.executeUpdate();
                        //System.out.println(SQL_updatePet);
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    
    public boolean addUpgrade(Upgrade up) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		if(checkIfUpgradeExists(up))
			return false;

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addUpgrade);
			int index = 1;
                        pst.setString(index++, up.getName());
                        pst.setInt(index++, up.getPrice());
                        pst.setString(index++, up.getProperty());
                        pst.setString(index++, up.getSpecies());
                        pst.setInt(index++, up.getValue());
                        pst.setString(index++, up.getImage());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public Map<Integer, Upgrade> getUpgrade() throws SQLException{
		Connection conn = null;
		Statement st = null;
		//Toroljuk a memoriabol a customereket (azert tartjuk bennt, mert lehetnek kesobb olyan muveletek, melyekhez nem kell frissiteni)
		upgrades.clear();
		
		try {
			//Az adatb�zis kapcsolatunkat a DriverManager seg�ts�g�vel hozzuk l�tre
			//Megadjuk hogy a jdbc milyen driveren keresztul milyen f�jlt keressen
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			//a kapcsolat(conn) objektumtol kerunk egy egyszeru (nem parameterezheto) utasitast
			st = conn.createStatement();
			//Az utasitas objektumon keresztul inditunk egy queryt(SQL_listCustomers)
			//Az eredmenyeket egy ResultSet objektumban kapjuk vissza
			ResultSet rs = st.executeQuery(SQL_listUpgrades);
			//Bejarjuk a visszakapott ResultSet-et (ami a customereket fogja tartalmazni)
			while(rs.next()){
				//Uj Customert hozunk letre
				Upgrade up = new Upgrade();
				//A customer nevet a resultSet aktualis soraban talalhato name rekordra allitjuk be
                                up.setId(rs.getInt("upgradeid"));
                                up.setName(rs.getString("name"));
                                up.setPrice(rs.getInt("price"));
                                up.setProperty(rs.getString("property"));
                                up.setSpecies(rs.getString("species"));
                               	up.setValue(rs.getInt("value"));
                                up.setImage(rs.getString("image"));
                                
				upgrades.put(rs.getInt("upgradeid"), up);
			}
		} finally {
			try {
				if(st != null)
					st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return upgrades;
	}
    
    public boolean checkIfUpgradeExists(Upgrade up) throws SQLException {
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		try {
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			pst = conn.prepareStatement(SQL_queryUpgrade);
			int index = 1;
			pst.setString(index++, up.getName());
			rs = pst.executeQuery();
			
			if (rs.next())
				return true;
			return false;			
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}	

    public boolean delUpgrade(Upgrade up) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delUpgrade);
			int index = 1;
			pst.setString(index++, up.getName());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
 
    public boolean updateUpgrade(Upgrade u) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updateUpgrade);
			int index = 1;
			
			pst.setString(index++, u.getName());
                        pst.setInt(index++, u.getPrice());
                        pst.setString(index++, u.getProperty());
                        pst.setString(index++, u.getSpecies());
                        pst.setInt(index++, u.getValue());
                        pst.setString(index++, u.getImage());
                        pst.setInt(index++, u.getId());
                        
			pst.executeUpdate();
                        //System.out.println(SQL_updatePet);
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    
    public boolean addJob(Job j) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		if(checkIfJobExists(j))
			return false;

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addJob);
			int index = 1;
                        pst.setInt(index++, j.getImpactenergy());
                        pst.setInt(index++, j.getImpacthunger());
                        pst.setInt(index++, j.getImpacthygiene());
                        pst.setInt(index++, j.getImpactfun());
                        pst.setString(index++, j.getTitle());
                        pst.setInt(index++, j.getLength());
                        pst.setString(index++, j.getImage());
                        pst.setString(index++, j.getClient());
                        pst.setString(index++, j.getMessage());
                        pst.setInt(index++, j.getReward());
                        pst.setString(index++, j.getSpecies());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public Map<Integer, Job> getJob() throws SQLException{
		Connection conn = null;
		Statement st = null;
		//Toroljuk a memoriabol a customereket (azert tartjuk bennt, mert lehetnek kesobb olyan muveletek, melyekhez nem kell frissiteni)
		jobs.clear();
		
		try {
			//Az adatb�zis kapcsolatunkat a DriverManager seg�ts�g�vel hozzuk l�tre
			//Megadjuk hogy a jdbc milyen driveren keresztul milyen f�jlt keressen
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			//a kapcsolat(conn) objektumtol kerunk egy egyszeru (nem parameterezheto) utasitast
			st = conn.createStatement();
			//Az utasitas objektumon keresztul inditunk egy queryt(SQL_listCustomers)
			//Az eredmenyeket egy ResultSet objektumban kapjuk vissza
			ResultSet rs = st.executeQuery(SQL_listJobs);
			//Bejarjuk a visszakapott ResultSet-et (ami a customereket fogja tartalmazni)
			while(rs.next()){
				//Uj Customert hozunk letre
				Job j = new Job();
				//A customer nevet a resultSet aktualis soraban talalhato name rekordra allitjuk be
				j.setId(rs.getInt("id"));
                                j.setImpactenergy(rs.getInt("impactenergy"));
                                j.setImpacthunger(rs.getInt("impacthunger"));
                                j.setImpacthygiene(rs.getInt("impacthygiene"));
                                j.setImpactfun(rs.getInt("impactfun"));
                                j.setTitle(rs.getString("title"));
                                j.setLength(rs.getInt("length"));
                                j.setImage(rs.getString("image"));
                                j.setClient(rs.getString("client"));
                                j.setMessage(rs.getString("message"));
                                j.setReward(rs.getInt("reward"));
                                j.setSpecies(rs.getString("species"));
                                
				jobs.put(rs.getInt("id"), j);
			}
		} finally {
			try {
				if(st != null)
					st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return jobs;
	}
    
    public boolean checkIfJobExists(Job j) throws SQLException {
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		try {
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			
			pst = conn.prepareStatement(SQL_queryJob);
			int index = 1;
			pst.setString(index++, j.getTitle());
                        pst.setString(index++, j.getSpecies());
			rs = pst.executeQuery();
                        
			
			if (rs.next())
				return true;
			return false;			
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(rs != null)
					rs.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}	

    public boolean delJob(Job j) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delJob);
			int index = 1;
			pst.setInt(index++, j.getId());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

    public boolean updateJob(Job j) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updateJob);
			int index = 1;
			
                        pst.setInt(index++, j.getImpactenergy());
                        pst.setInt(index++, j.getImpacthunger());
                        pst.setInt(index++, j.getImpacthygiene());
                        pst.setInt(index++, j.getImpactfun());
                        pst.setString(index++, j.getTitle());
                        pst.setInt(index++, j.getLength());
                        pst.setString(index++, j.getImage());
                        pst.setString(index++, j.getClient());
                        pst.setString(index++, j.getMessage());
                        pst.setInt(index++, j.getReward());
                        pst.setString(index++, j.getSpecies());
                        pst.setInt(index++, j.getId());
                        
			pst.executeUpdate();
                        //System.out.println(SQL_updatePet);
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    
    public boolean addFoodOwned(Pet p, Food f, int piece) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addPetsFoods);
			int index = 1;
			pst.setInt(index++, p.getPetid());
                        pst.setInt(index++, f.getId());
                        pst.setInt(index++, piece);
                        			
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public boolean addUpgradeOwned(Pet p, Upgrade u, int piece) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addPetsUpgrades);
			int index = 1;
			pst.setInt(index++, p.getPetid());
                        pst.setInt(index++, u.getId());
                        pst.setInt(index++, piece);
                        			
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

    public boolean updateFoodOwned(Pet p, Food f, int piece) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updatePetsFoods);
			int index = 1;
			pst.setInt(index++, piece);
                        System.out.println("piece: " + piece);
			pst.setInt(index++, p.getPetid());
                        System.out.println("petid: " + p.getPetid());
			pst.setInt(index++, f.getId());
                        System.out.println("foodid: " + f.getId());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public boolean updateUpgradeOwned(Pet p, Upgrade u, int piece) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updatePetsUpgrades);
			int index = 1;
			pst.setInt(index++, piece);
                        System.out.println("piece: " + piece);
			pst.setInt(index++, p.getPetid());
                        System.out.println("petid: " + p.getPetid());
			pst.setInt(index++, u.getId());
                        System.out.println("upgradeid: " + u.getId());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

    public boolean delFoodOwned(Pet p, Food f) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delPetsFoods);
			int index = 1;
			pst.setInt(index++, p.getPetid());
                        pst.setInt(index++, f.getId());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
    
    public boolean delUpgradeOwned(Pet p, Upgrade u) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delPetsUpgrades);
			int index = 1;
			pst.setInt(index++, p.getPetid());
                        pst.setInt(index++, u.getId());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}


    public boolean addJobOwned(Pet p, Job j, int timeworked) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_addPetsJob);
			int index = 1;
			pst.setInt(index++, p.getPetid());
                        pst.setInt(index++, j.getId());
                        pst.setInt(index++, timeworked);
                        
                        			
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

    public boolean updateJobOwned(Pet p, Job j, int timeworked) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);
		
		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_updatePetsJob);
			int index = 1;
			pst.setInt(index++, timeworked);
                        //System.out.println("piece: " + timeworked);
			pst.setInt(index++, p.getPetid());
                        //System.out.println("petid: " + p.getPetid());
			pst.setInt(index++, j.getId());
                        //System.out.println("foodid: " + f.getId());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}

    public boolean delJobOwned(Pet p, Job j) throws SQLException{
		
                System.out.println("jdbc:sqlite:"+dbfile);

		Connection conn = null;
		PreparedStatement pst = null;
		try {
                        
			conn = DriverManager.getConnection("jdbc:sqlite:"+dbfile);
			pst = conn.prepareStatement(SQL_delPetsJob);
			int index = 1;
			pst.setInt(index++, p.getPetid());
                        pst.setInt(index++, j.getId());
                        
			pst.executeUpdate();
		} finally {
			try {
				if(pst != null)
					pst.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			try {
				if(conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return true;
	}
}


---Item.java---
package raisemeup.model.beans;

/**
 * * * @author lekogabor
 */
public abstract class Item {

    private int id;
    private String name;
    private int price;
    private String image;

    /**
     * * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * * @param id the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * * @return the price
     */
    public int getPrice() {
        return price;
    }

    /**
     * * @param price the price to set
     */
    public void setPrice(int price) {
        this.price = price;
    }
    
    /**
     * @return the image
     */
    public String getImage() {
        return image;
    }

    /**
     * @param image the image to set
     */
    public void setImage(String image) {
        this.image = image;
    }
}


---Job.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model.beans;

/**
 *
 * @author Kicsi Andras
 */
public class Job {
    private int id;
    private int impactenergy;
    private int impacthunger;
    private int impacthygiene;
    private int impactfun;
    private String title;
    private int length;
    private String image;
    private String client;
    private String message;
    private int reward;
    private String species;

    /**
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * @return the impactenergy
     */
    public int getImpactenergy() {
        return impactenergy;
    }

    /**
     * @param impactenergy the impactenergy to set
     */
    public void setImpactenergy(int impactenergy) {
        this.impactenergy = impactenergy;
    }

    /**
     * @return the impacthunger
     */
    public int getImpacthunger() {
        return impacthunger;
    }

    /**
     * @param impacthunger the impacthunger to set
     */
    public void setImpacthunger(int impacthunger) {
        this.impacthunger = impacthunger;
    }

    /**
     * @return the impacthygiene
     */
    public int getImpacthygiene() {
        return impacthygiene;
    }

    /**
     * @param impacthygiene the impacthygiene to set
     */
    public void setImpacthygiene(int impacthygiene) {
        this.impacthygiene = impacthygiene;
    }

    /**
     * @return the impactfun
     */
    public int getImpactfun() {
        return impactfun;
    }

    /**
     * @param impactfun the impactfun to set
     */
    public void setImpactfun(int impactfun) {
        this.impactfun = impactfun;
    }

    /**
     * @return the title
     */
    public String getTitle() {
        return title;
    }

    /**
     * @param title the title to set
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * @return the image
     */
    public String getImage() {
        return image;
    }

    /**
     * @param image the image to set
     */
    public void setImage(String image) {
        this.image = image;
    }

    /**
     * @return the client
     */
    public String getClient() {
        return client;
    }

    /**
     * @param client the client to set
     */
    public void setClient(String client) {
        this.client = client;
    }

    /**
     * @return the message
     */
    public String getMessage() {
        return message;
    }

    /**
     * @param message the message to set
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * @return the length
     */
    public int getLength() {
        return length;
    }

    /**
     * @param length the length to set
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * @return the reward
     */
    public int getReward() {
        return reward;
    }

    /**
     * @param reward the reward to set
     */
    public void setReward(int reward) {
        this.reward = reward;
    }

    /**
     * @return the species
     */
    public String getSpecies() {
        return species;
    }

    /**
     * @param species the species to set
     */
    public void setSpecies(String species) {
        this.species = species;
    }
    
    
}


---UserBuilder.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model.beans;


public class UserBuilder {
    private int id=0;
    private String email="";
    private String username="";
    private String password="";

    public UserBuilder() {
    }

    public UserBuilder setId(int id) {
        this.id = id;
        return this;
    }

    public UserBuilder setEmail(String email) {
        this.email = email;
        return this;
    }

    public UserBuilder setUsername(String username) {
        this.username = username;
        return this;
    }

    public UserBuilder setPassword(String password) {
        this.password = password;
        return this;
    }

    public User createUser() {
        return new User(id, email, username, password);
    }
    
}


---Pet.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model.beans;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author lekogabor
 */
public class Pet {
    private int petid;
    private int owner;
    private String name;
    private String type;
    private String variant;
    private int hunger;
    private int energy;
    private int fun;
    private int hygiene;
    private int age;
    private String image;
    private Map<Item, Integer> owneditems = new HashMap<Item, Integer>();
    private Map<Job, Integer> ownedjobs = new HashMap<Job, Integer>();
    
    private int money;

    public Pet(int owner, String name, String type, String variant, String image) {
        this.owner = owner;
        this.name = name;
        this.type = type;
        this.variant = variant;
        this.image = image;
        
        petid=0;
        hunger = 100;
        energy = 100;
        fun = 100;
        hygiene = 100;
        money=100;
        age=0;
    }
    
    public Pet() {
        
    }

    
    public int getEmotion() {
        int avg = (hunger+energy+fun+hygiene)/4;
        if(avg<30 || hunger==0 || energy==0 || fun==0 || hygiene==0) return 0;
        if(avg<60) return 1;
        else return 2;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return the hunger
     */
    public int getHunger() {
        return hunger;
    }

    /**
     * @param hunger the hunger to set
     */
    public void setHunger(int hunger) {
        this.hunger = hunger;
    }

    /**
     * @return the energy
     */
    public int getEnergy() {
        return energy;
    }

    /**
     * @param energy the energy to set
     */
    public void setEnergy(int energy) {
        this.energy = energy;
    }

    /**
     * @return the fun
     */
    public int getFun() {
        return fun;
    }

    /**
     * @param fun the fun to set
     */
    public void setFun(int fun) {
        this.fun = fun;
    }

    /**
     * @return the hygiene
     */
    public int getHygiene() {
        return hygiene;
    }

    /**
     * @param hygiene the hygiene to set
     */
    public void setHygiene(int hygiene) {
        this.hygiene = hygiene;
    }

    /**
     * @return the age
     */
    public int getAge() {
        return age;
    }

    /**
     * @param age the age to set
     */
    public void setAge(int age) {
        this.age = age;
    }


    /**
     * @return the money
     */
    public int getMoney() {
        return money;
    }

    /**
     * @param money the money to set
     */
    public void setMoney(int money) {
        this.money = money;
    }

    /**
     * @return the type
     */
    public String getType() {
        return type;
    }

    /**
     * @param type the type to set
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * @return the variant
     */
    public String getVariant() {
        return variant;
    }

    /**
     * @param variant the variant to set
     */
    public void setVariant(String variant) {
        this.variant = variant;
    }

    /**
     * @return the image
     */
    public String getImage() {
        return image;
    }

    /**
     * @param image the image to set
     */
    public void setImage(String image) {
        this.image = image;
    }

    /**
     * @return the owner
     */
    public int getOwner() {
        return owner;
    }

    /**
     * @param owner the owner to set
     */
    public void setOwner(int owner) {
        this.owner = owner;
    }

    /**
     * @return the petid
     */
    public int getPetid() {
        return petid;
    }

    /**
     * @param petid the petid to set
     */
    public void setPetid(int petid) {
        this.petid = petid;
    }

    /**
     * @return the owneditems
     */
    public Map<Item, Integer> getOwneditems() {
        return owneditems;
    }

    /**
     * @param owneditems the owneditems to set
     */
    public void setOwneditems(Map<Item, Integer> owneditems) {
        this.owneditems = owneditems;
    }

    /**
     * @return the ownedjobs
     */
    public Map<Job, Integer> getOwnedjobs() {
        return ownedjobs;
    }

    /**
     * @param ownedjobs the ownedjobs to set
     */
    public void setOwnedjobs(Map<Job, Integer> ownedjobs) {
        this.ownedjobs = ownedjobs;
    }

  
    
    
}


---Food.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model.beans;

/**
 *
 * @author lekogabor
 */
public class Food extends Item{
    
    private int valuedog;
    private int valuecat;
    private int valuefish;
    private int valuepenguin;
    

    /**
     * @return the valuedog
     */
    public int getValuedog() {
        return valuedog;
    }

    /**
     * @param valuedog the valuedog to set
     */
    public void setValuedog(int valuedog) {
        this.valuedog = valuedog;
    }

    /**
     * @return the valuecat
     */
    public int getValuecat() {
        return valuecat;
    }

    /**
     * @param valuecat the valuecat to set
     */
    public void setValuecat(int valuecat) {
        this.valuecat = valuecat;
    }

    /**
     * @return the valuefish
     */
    public int getValuefish() {
        return valuefish;
    }

    /**
     * @param valuefish the valuefish to set
     */
    public void setValuefish(int valuefish) {
        this.valuefish = valuefish;
    }

    /**
     * @return the valuepenguin
     */
    public int getValuepenguin() {
        return valuepenguin;
    }

    /**
     * @param valuepenguin the valuepenguin to set
     */
    public void setValuepenguin(int valuepenguin) {
        this.valuepenguin = valuepenguin;
    }

    
    
    
    
}


---PetBuilder.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model.beans;


public class PetBuilder {
    private int owner=0;
    private String name="";
    private String type="";
    private String variant="";
    private String image="";

    public PetBuilder() {
    }

    public PetBuilder setOwner(int owner) {
        this.owner = owner;
        return this;
    }

    public PetBuilder setName(String name) {
        this.name = name;
        return this;
    }

    public PetBuilder setType(String type) {
        this.type = type;
        return this;
    }

    public PetBuilder setVariant(String variant) {
        this.variant = variant;
        return this;
    }

    public PetBuilder setImage(String image) {
        this.image = image;
        return this;
    }

    public Pet createPet() {
        return new Pet(owner, name, type, variant, image);
    }
    
}


---User.java---
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package raisemeup.model.beans;

/**
 *
 * @author lekogabor
 */
public class User {
    
    private int id;
    private String email;
    private String username;
    private String password;

    public User(int id, String email, String username, String password) {
        this.id = id;
        this.email = email;
        this.username = username;
        this.password = password;
    }
    
    public User() {
        
    }

    /**
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * @return the email
     */
    public String getEmail() {
        return email;
    }

    /**
     * @param email the email to set
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * @return the username
     */
    public String getUsername() {
        return username;
    }

    /**
     * @param username the username to set
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * @return the password
     */
    public String getPassword() {
        return password;
    }

    /**
     * @param password the password to set
     */
    public void setPassword(String password) {
        this.password = password;
    }
    
    
    
    
}


---RaiseMeUp.java---

package raisemeup.control;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import raisemeup.model.DAO;
import raisemeup.model.beans.Food;
import raisemeup.model.beans.Job;
import raisemeup.model.beans.Pet;
import raisemeup.model.beans.PetBuilder;
import raisemeup.model.beans.Upgrade;
import raisemeup.model.beans.User;
import raisemeup.model.beans.UserBuilder;
import raisemeup.view.AdminFoods;
import raisemeup.view.AdminJobs;
import raisemeup.view.AdminPets;
import raisemeup.view.AdminPetsItems;
import raisemeup.view.AdminPetsJobs;
import raisemeup.view.AdminTiming;
import raisemeup.view.AdminUpgrades;
import raisemeup.view.AdminUsers;
import raisemeup.view.AdminWindow;
import raisemeup.view.ErrorMessage;
import raisemeup.view.JobDone;
import raisemeup.view.JobsWindow;
import raisemeup.view.Login;
import raisemeup.view.MarketWindow;
import raisemeup.view.PetChooser;
import raisemeup.view.PetCreator;
import raisemeup.view.PetWindow;
import raisemeup.view.Register;
import raisemeup.view.UserSettings;

/**
 *
 * @author Kicsi Andras
 */
public class RaiseMeUp {
    
    private static Login login;
    private static Register register;
    private static PetWindow petWindow;
    private static DAO dao;
    private static ErrorMessage errorMessage;
    private static PetChooser petChooser;
    private static PetCreator petCreator;
    private static AdminUsers adminUsers;
    private static AdminWindow adminWindow;
    private static AdminPets adminPets;
    private static AdminPetsItems adminPetsItems;
    private static AdminFoods adminFoods;
    private static AdminUpgrades adminUpgrades;
    private static AdminJobs adminJobs;
    private static AdminPetsJobs adminPetsJobs;
    private static AdminTiming adminTiming;
    private static JobsWindow jobsWindow;
    private static JobDone jobDone;
    private static MarketWindow marketWindow;
    private static UserSettings userSettings;
    
    private static User currentUser;
    private static Pet currentPet;

    /**
     * @return the currentJob
     */
    public static Job getCurrentJob() {
        return currentJob;
    }

    /**
     * @param aCurrentJob the currentJob to set
     */
    public static void setCurrentJob(Job aCurrentJob) {
        currentJob = aCurrentJob;
    }
    
    private static boolean onJob=false;
    private static Job currentJob;
    private static int jobprogress;
	
    private static float timeModifier=(float)0.06;// ha 1, akkor  1 perc 1 ora 0.05 *600
    
    public static void init() {
        if(getLogin()==null) setLogin(new Login());
        if(getJobDone()==null) setJobDone(new JobDone());
        
        if(getDao()==null) try {
            setDao(new DAO());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not connect to Database!", ex);
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        init();
        getLogin().setVisible(true);
    }

    /**
     * @return the login
     */
    public static Login getLogin() {
        return login;
    }

    /**
     * @param aLogin the login to set
     */
    public static void setLogin(Login aLogin) {
        login = aLogin;
    }

    /**
     * @return the register
     */
    public static Register getRegister() {
        return register;
    }

    /**
     * @param aRegister the register to set
     */
    public static void setRegister(Register aRegister) {
        register = aRegister;
    }
    
    public static BufferedImage resizeImage(BufferedImage originalImage, int type, int maxSize)
    {
        if(originalImage.getWidth()>maxSize || originalImage.getHeight()>maxSize) {
            double scale;
            BufferedImage resizedImage;
            if(originalImage.getWidth()>originalImage.getHeight()) {
                scale=(double)originalImage.getHeight()/originalImage.getWidth();
                resizedImage = new BufferedImage(maxSize, (int)(scale*maxSize), type);
                Graphics2D g = resizedImage.createGraphics();
                g.drawImage(originalImage, 0, 0, maxSize, (int)(scale*maxSize), null);
                g.dispose();
            }
            else {
                scale=(double)originalImage.getWidth()/originalImage.getHeight();
                resizedImage = new BufferedImage((int)(scale*maxSize), maxSize, type);
                Graphics2D g = resizedImage.createGraphics();
                g.drawImage(originalImage, 0, 0, (int)(scale*maxSize), maxSize, null);
                g.dispose();
            }
            return resizedImage;
        }
        else return originalImage;
    }
    
    public static BufferedImage resizeImage(BufferedImage originalImage, int type, int maxWidth, int maxHeight)
    {
        if(originalImage.getWidth()>maxWidth || originalImage.getHeight()>maxHeight) {
            double scale;
            BufferedImage resizedImage;
            if(originalImage.getWidth()>originalImage.getHeight()) {
                scale=(double)originalImage.getHeight()/originalImage.getWidth();
                resizedImage = new BufferedImage(maxWidth, (int)(scale*maxWidth), type);
                Graphics2D g = resizedImage.createGraphics();
                g.drawImage(originalImage, 0, 0, maxWidth, (int)(scale*maxWidth), null);
                g.dispose();
            }
            else {
                scale=(double)originalImage.getWidth()/originalImage.getHeight();
                resizedImage = new BufferedImage((int)(scale*maxHeight), maxHeight, type);
                Graphics2D g = resizedImage.createGraphics();
                g.drawImage(originalImage, 0, 0, (int)(scale*maxHeight), maxHeight, null);
                g.dispose();
            }
            return resizedImage;
        }
        else return originalImage;
    }

    /**
     * @return the petWindow
     */
    public static PetWindow getPetWindow() {
        return petWindow;
    }

    /**
     * @param aPetWindow the petWindow to set
     */
    public static void setPetWindow(PetWindow aPetWindow) {
        petWindow = aPetWindow;
    }

    /**
     * @return the dao
     */
    public static DAO getDao() {
        return dao;
    }

    /**
     * @param aDao the dao to set
     */
    public static void setDao(DAO aDao) {
        dao = aDao;
    }
    
    public static boolean newUser(int id, String email, String username, String password) {
        UserBuilder userbuilder = new UserBuilder();
        userbuilder.setUsername(username);
        userbuilder.setId(id);
        userbuilder.setEmail(email);
        userbuilder.setPassword(password);
        try {
            dao.addUser(userbuilder.createUser());
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not add user to database!", ex);
            return false;
        }
        return true;
    }
    
    public static void bookMyNewAnimal(String animalname, String type, String variant, String imagestring) {
        PetBuilder pb = new PetBuilder().setName(animalname).setType(type).setVariant(variant).setOwner(currentUser.getId()).setImage(imagestring);
        Pet newPet = pb.createPet();
        try {
            dao.addPet(newPet);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot add pet to the database!", ex);
        }
        petWindow = new PetWindow(newPet);
        getPetCreator().setVisible(false);
        petWindow.setVisible(true);
    }
    
    public static boolean newFood (Food f){
        
        try {
            dao.addFood(f);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not add food to database!", ex);
            return false;
        }
        return true;
    }
    
    public static boolean newUpgrade (Upgrade u){
        
        try {
            dao.addUpgrade(u);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not add upgrade to database!", ex);
            return false;
        }
        return true;
    }   
    
    public static boolean newJob (Job j){
        
        try {
            dao.addJob(j);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not add job to database!", ex);
            return false;
        }
        return true;
    }
    
    public static boolean newFoodOwned (Pet p, Food f, int piece){
        
        try {
            dao.addFoodOwned(p,f, piece);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not add owned food to database!", ex);
            return false;
        }
        return true;
    }
    
    public static boolean newUpgradeOwned (Pet p, Upgrade u, int piece){
        
        try {
            dao.addUpgradeOwned(p,u, piece);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not add owned upgrade to database!", ex);
            return false;
        }
        return true;
    }
 
    public static boolean newJobOwned (Pet p, Job j, int timeworked){
        
        try {
            dao.addJobOwned(p, j, timeworked);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Could not add owned job to database!", ex);
            return false;
        }
        return true;
    }
    
    
    public static Map<Integer, User> listUsers() {
        Map<Integer,User> users = new HashMap<Integer, User>();
        try {
            users = dao.getUser();
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot get user data from database!", ex);
        }
        
        return users;
    }
    
    public static Map<Integer, Pet> listPets(){
        Map<Integer,Pet> pets = new HashMap<Integer, Pet>();
        try {
            pets = dao.getPet();
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot get pet data from database!", ex);
        }
        
        return pets;
    }
    
    public static Map<Integer, Food> listFoods(){
        Map<Integer,Food> foods = new HashMap<Integer, Food>();
        try {
            foods = dao.getFood();
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot get foods data from database!", ex);
        }
        
        return foods;
    }
    
    public static Map<Integer, Upgrade> listUpgrades(){
        Map<Integer,Upgrade> upgrades = new HashMap<Integer, Upgrade>();
        try {
            upgrades = dao.getUpgrade();
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot get upgrades data from database!", ex);
        }
        
        return upgrades;
    }
    
    public static Map<Integer, Job> listJobs(){
        Map<Integer,Job> jobs = new HashMap<Integer, Job>();
        try {
            jobs = dao.getJob();
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot get jobs data from database!", ex);
        }
        
        return jobs;
    }
    
    
    public static boolean removeUser(User u){
        
        try {
            dao.delUser(u);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete user from database!", ex);
        }
        
        return true;
    }
    
    public static boolean removePet(Pet p){
        
        try {
            dao.delPet(p);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete pet from database!", ex);
        }
        
        return true;
    }
    
    public static boolean removeFood(Food f){
        
        try {
            dao.delFood(f);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete food from database!", ex);
        }
        
        return true;
    }
    
    public static boolean removeUpgrade(Upgrade u){
        
        try {
            dao.delUpgrade(u);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete upgrade from database!", ex);
        }
        
        return true;
    }
    
    public static boolean removeJob(Job j){
        
        try {
            dao.delJob(j);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete job from database!", ex);
        }
        
        return true;
    }
    
    public static boolean removeFoodOwned(Pet p, Food f){
        
        try {
            dao.delFoodOwned(p, f);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete owned food from database!", ex);
        }
        
        return true;
    }
    
    public static boolean removeUpgradeOwned(Pet p, Upgrade u){
        
        try {
            dao.delUpgradeOwned(p, u);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete owned upgrade from database!", ex);
        }
        
        return true;
    }
    
    public static boolean removeJobOwned(Pet p, Job j){
        
        try {
            dao.delJobOwned(p, j);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot delete owned job from database!", ex);
        }
        
        return true;
    }
    
    
    public static boolean updateUser(User u){
        try {
            dao.updateUser(u);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update user in database!", ex);
        }
        
        return true;
    }
    
    public static boolean updatePet(Pet p){
        try {
            dao.updatePet(p);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update pet in database!", ex);
        }
        
        return true;
    }
    
    public static boolean updateFood(Food f){
        try {
            dao.updateFood(f);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update food in database!", ex);
        }
        
        return true;
    }
    
    public static boolean updateUpgrade(Upgrade u){
        try {
            dao.updateUpgrade(u);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update upgrade in database!", ex);
        }
        
        return true;
    }
    
    public static boolean updateJob(Job j){
        try {
            dao.updateJob(j);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update job in database!", ex);
        }
        
        return true;
    }
    
    public static boolean updateFoodOwned(Pet p, Food f, int piece){
        try {
            dao.updateFoodOwned(p, f, piece);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update owned food in database!", ex);
        }
        
        return true;
    }
    
    public static boolean updateUpgradeOwned(Pet p, Upgrade u, int piece){
        try {
            dao.updateUpgradeOwned(p, u, piece);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update owned upgrade in database!", ex);
        }
        
        return true;
    }
     
    public static boolean updateJobOwned(Pet p, Job j, int timeworked){
        try {
            dao.updateJobOwned(p, j, timeworked);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot update owned job in database!", ex);
        }
        
        return true;
    }
    
    
    
    public static boolean doesUserExist(String username) {
        UserBuilder ub = new UserBuilder().setUsername(username);
        try {
            return dao.checkIfUserExists(ub.createUser());
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot check if user already exists!", ex);
        }
        return true;
    }
    
    public static boolean doesPetExist(String petname) {
        PetBuilder pb = new PetBuilder().setName(petname).setOwner(currentUser.getId());
        try {
            return dao.checkIfPetExists(pb.createPet());
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot check if pet already exists!", ex);
        }
        return true;
    }
    
    public static void login(String username, String password) {
        boolean loggedin=false;
        Map<Integer,User> users = new HashMap<Integer, User>();
        
        
        
        if ("admin".equals(username) && "admin".equals(password)){
            adminWindow = new AdminWindow();
            login.setVisible(false);
            adminWindow.setVisible(true);
            loggedin = true;
        } else {
        
            try {
                users = dao.getUser();
            } catch (SQLException ex) {
                Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, "Cannot get user data from database!", ex);
            }
            
            for(Map.Entry<Integer,User> user : users.entrySet()) {
                if(user.getValue().getUsername().equals(username) && user.getValue().getPassword().equals(password)) {
                    setCurrentUser(user.getValue());
                    loggedin=true;
                    setPetChooser(new PetChooser());
                    login.setVisible(false);
                    getPetChooser().setVisible(true);
                }
            }
        }
        if(!loggedin) {
            RaiseMeUp.setErrorMessage(new ErrorMessage("Failed to log you in. Please try again."));
            RaiseMeUp.getErrorMessage().setVisible(true);
        }
        
    }
    
    

    /**
     * @return the errorMessage
     */
    public static ErrorMessage getErrorMessage() {
        return errorMessage;
    }

    /**
     * @param aErrorMessage the errorMessage to set
     */
    public static void setErrorMessage(ErrorMessage aErrorMessage) {
        errorMessage = aErrorMessage;
    }

    /**
     * @return the currentUser
     */
    public static User getCurrentUser() {
        return currentUser;
    }

    /**
     * @param aCurrentUser the currentUser to set
     */
    public static void setCurrentUser(User aCurrentUser) {
        currentUser = aCurrentUser;
    }

    /**
     * @return the adminWindow
     */
    public static AdminWindow getAdminWindow() {
        return adminWindow;
    }

    /**
     * @param aAdminWindow the adminWindow to set
     */
    public static void setAdminWindow(AdminWindow aAdminWindow) {
        adminWindow = aAdminWindow;
    }

    /**
     * @return the adminUsers
     */
    public static AdminUsers getAdminUsers() {
        return adminUsers;
    }

    /**
     * @param aAdminUsers the adminUsers to set
     */
    public static void setAdminUsers(AdminUsers aAdminUsers) {
        adminUsers = aAdminUsers;
    }

    /**
     * @return the adminPets
     */
    public static AdminPets getAdminPets() {
        return adminPets;
    }

    /**
     * @param aAdminPets the adminPets to set
     */
    public static void setAdminPets(AdminPets aAdminPets) {
        adminPets = aAdminPets;
    }

    /**
     * @return the adminPetsItems
     */
    public static AdminPetsItems getAdminPetsItems() {
        return adminPetsItems;
    }

    /**
     * @param aAdminPetsItems the adminPetsItems to set
     */
    public static void setAdminPetsItems(AdminPetsItems aAdminPetsItems) {
        adminPetsItems = aAdminPetsItems;
    }

    /**
     * @return the adminFoods
     */
    public static AdminFoods getAdminFoods() {
        return adminFoods;
    }

    /**
     * @param aAdminFoods the adminFoods to set
     */
    public static void setAdminFoods(AdminFoods aAdminFoods) {
        adminFoods = aAdminFoods;
    }

    /**
     * @return the adminUpgrades
     */
    public static AdminUpgrades getAdminUpgrades() {
        return adminUpgrades;
    }

    /**
     * @param aAdminUpgrades the adminUpgrades to set
     */
    public static void setAdminUpgrades(AdminUpgrades aAdminUpgrades) {
        adminUpgrades = aAdminUpgrades;
    }

    /**
     * @return the adminJobs
     */
    public static AdminJobs getAdminJobs() {
        return adminJobs;
    }

    /**
     * @param aAdminJobs the adminJobs to set
     */
    public static void setAdminJobs(AdminJobs aAdminJobs) {
        adminJobs = aAdminJobs;
    }

    /**
     * @return the adminPetsJobs
     */
    public static AdminPetsJobs getAdminPetsJobs() {
        return adminPetsJobs;
    }

    /**
     * @param aAdminPetsJobs the adminPetsJobs to set
     */
    public static void setAdminPetsJobs(AdminPetsJobs aAdminPetsJobs) {
        adminPetsJobs = aAdminPetsJobs;
    }
    
    /**
     * @return the petCreator
     */
    public static PetCreator getPetCreator() {
        return petCreator;
    }

    /**
     * @param aPetCreator the petCreator to set
     */
    public static void setPetCreator(PetCreator aPetCreator) {
        petCreator = aPetCreator;
    }

    /**
     * @return the petChooser
     */
    public static PetChooser getPetChooser() {
        return petChooser;
    }

    /**
     * @param aPetChooser the petChooser to set
     */
    public static void setPetChooser(PetChooser aPetChooser) {
        petChooser = aPetChooser;
    }

    /**
     * @return the currentPet
     */
    public static Pet getCurrentPet() {
        return currentPet;
    }

    /**
     * @param aCurrentPet the currentPet to set
     */
    public static void setCurrentPet(Pet aCurrentPet) {
        currentPet = aCurrentPet;
    }

    /**
     * @return the timeModifier
     */
    public static float getTimeModifier() {
        return timeModifier;
    }

    /**
     * @param aTimeModifier the timeModifier to set
     */
    public static void setTimeModifier(float aTimeModifier) {
        timeModifier = aTimeModifier;
    }
    
    public static void petLeaves() {
        petWindow.petLeaves();
        if(RaiseMeUp.getJobsWindow()!=null) RaiseMeUp.getJobsWindow().setVisible(false);
        if(RaiseMeUp.getMarketWindow()!=null) RaiseMeUp.getMarketWindow().setVisible(false);
        RaiseMeUp.setErrorMessage(new ErrorMessage("You have been a bad master, " + currentPet.getName() + " left you."));
        RaiseMeUp.getErrorMessage().setVisible(true);
        try {
            dao.delPet(currentPet);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void deletePet(Pet pet) {
        try {
            dao.delPet(pet);
        } catch (SQLException ex) {
            Logger.getLogger(RaiseMeUp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void modifyPet() {
        
    }

    /**
     * @return the adminTiming
     */
    public static AdminTiming getAdminTiming() {
        return adminTiming;
    }

    /**
     * @param aAdminTiming the adminTiming to set
     */
    public static void setAdminTiming(AdminTiming aAdminTiming) {
        adminTiming = aAdminTiming;
    }

    /**
     * @return the jobsWindow
     */
    public static JobsWindow getJobsWindow() {
        return jobsWindow;
    }

    /**
     * @param aJobsWindow the jobsWindow to set
     */
    public static void setJobsWindow(JobsWindow aJobsWindow) {
        jobsWindow = aJobsWindow;
    }

    /**
     * @return the onJob
     */
    public static boolean isOnJob() {
        return onJob;
    }

    /**
     * @param aOnJob the onJob to set
     */
    public static void setOnJob(boolean aOnJob) {
        onJob = aOnJob;
    }

    /**
     * @return the jobprogress
     */
    public static int getJobprogress() {
        return jobprogress;
    }

    /**
     * @param aJobprogress the jobprogress to set
     */
    public static void setJobprogress(int aJobprogress) {
        jobprogress = aJobprogress;
    }

    /**
     * @return the jobDone
     */
    public static JobDone getJobDone() {
        return jobDone;
    }

    /**
     * @param aJobDone the jobDone to set
     */
    public static void setJobDone(JobDone aJobDone) {
        jobDone = aJobDone;
    }

    /**
     * @return the marketWindow
     */
    public static MarketWindow getMarketWindow() {
        return marketWindow;
    }

    /**
     * @param aMarketWindow the marketWindow to set
     */
    public static void setMarketWindow(MarketWindow aMarketWindow) {
        marketWindow = aMarketWindow;
    }

    /**
     * @return the userSettings
     */
    public static UserSettings getUserSettings() {
        return userSettings;
    }

    /**
     * @param aUserSettings the userSettings to set
     */
    public static void setUserSettings(UserSettings aUserSettings) {
        userSettings = aUserSettings;
    }
    
    
}


